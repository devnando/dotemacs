;; -------------------------------------------------------------------------
;; .emacs - Nando's dot emacs
;; 
;; Hernando Furlan <devnando at gmail dot com>
;; https://github.com/devnando
;;
;; Must create these directories first:
;;
;;     ~/.emacs.semanticdb
;;     ~/.emacs.backups
;;
;; -------------------------------------------------------------------------

;; Uncomment to load installed dot emacs extensions ONLY if you're Gentoo user (I was a Gentoo user that's why)
;; (load "/usr/share/emacs/site-lisp/site-gentoo")

(add-to-list 'load-path "~/.elisp")
;;(require "php-mode")
(require 'php-mode)

(require 'multi-web-mode)
(setq mweb-default-major-mode 'html-mode)
(setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                  (js-mode "<script[^>]*>" "</script>")
                  (css-mode "<style[^>]*>" "</style>")))
(setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
(multi-web-global-mode 1)

;; My full name
(setq user-full-name "Hernando Furlan")

;; My email
(setq user-mail-address "devnando at gmail dot com")

;; My website/s
(setq user-website "https://github.com/devnando")

;; Save place
(require 'saveplace)
(setq-default save-place t)

;; Indent should not insert tabs
(setq-default indent-tabs-mode nil)

;; Prevent semantic.cache into entire hard disk
(setq semanticdb-default-save-directory "~/.emacs.semanticdb")

;; Autosave
(setq auto-save-default t)    ; Yes auto save good!
(setq auto-save-interval 100) ; Number of input chars between auto-saves
(setq auto-save-timeout 300)  ; Number of seconds idle time before auto-save

;; Backups (This saved my life a bunch of times!)
(setq make-backup-files t)
(setq backup-by-copying t)      				; Don't clobber symlinks
(setq backup-directory-alist '(("." . "~/.emacs.backups"))) 	; Don't litter my fs tree
(setq delete-old-versions t)    				; Clean up a little
(setq kept-new-versions 6)      				; Keep 6 new
(setq kept-old-versions 2)      				; Keep only 2 old
(setq version-control t)        				; Use versioned backups

;; Filetypes & modes
(setq auto-mode-alist
    (append '(("\\.C$"    . c++-mode)
              ("\\.cc$"   . c++-mode)
              ("\\.cpp$"  . c++-mode)
              ("\\.cxx$"  . c++-mode)
              ("\\.hxx$"  . c++-mode)
              ("\\.hpp$"  . c++-mode)
              ("\\.h$"    . c++-mode)
              ("\\.hh$"   . c++-mode)
              ("\\.idl$"  . c++-mode)
              ("\\.ipp$"  . c++-mode)
              ("\\.c$"    . c-mode)
              ("\\.pl$"   . cperl-mode)
              ("\\.pm$"   . cperl-mode)
              ("\\.java$" . java-mode)
              ("\\.inc$"  . php-mode)
              ("\\.php$"  . php-mode)
              ("\\.xml$"  . xml-mode)
              ("\\.dtl$"  . xml-mode)
              ("\\.ctp$"  . php-mode)
              ("\\.txt$"  . text-mode))
 auto-mode-alist))

;; I like tabs to 4 chars :P
(setq default-tab-width 4)

;; Some edition values fine-tuning
(setq c-mode-common-hook
  (function (lambda ()
  (setq c-basic-offset 4)
  (setq c-comment-only-line-offset 0)
  (setq c-indent-level 4)
  (setq c-brace-imaginary-offset 0)
  (setq c-brace-offset 0)
  (setq c-argdecl-indent 0)
  (setq c-label-offset -2)
  (setq c-continued-statement-offset 0)
  (setq c-continued-brace-offset -4)
  (setq c-tab-always-indent t)
  (setq tab-width 4)
  (line-number-mode 1)
  (c-set-offset 'member-init-intro 2)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'case-label 2)
  (c-set-offset 'access-label -2)
  (c-set-offset 'label 2)
  (c-set-offset 'statement-case-intro 2)
  (c-set-offset 'brace-list-entry 0)
  (c-set-offset 'knr-argdecl-intro 0)
  ))
)

;; Displays name of current function in modeline
(which-function-mode) 

;; Make pgup/dn remember current line
(setq scroll-preserve-screen-position t)

;; Replace "yes or no" prompt with "y or n" prompt
(defun yes-or-no-p (arg)
  "Allows letters 'y' or 'n' in response to prompts asking for either 'yes' or 'no'."
  (y-or-n-p arg))

;; Don't wrap long lines
(set-default 'truncate-lines t)

;; Make searches case insensitive
(setq case-fold-search t)

;;(standard-display-european +1)
(set-input-mode (car (current-input-mode))
                (nth 1 (current-input-mode))
                0)

;; No sounds! visual beep for me please...
(setq visible-bell t)

;; Always end a file with a newline
(setq require-final-newline t)

;; No toolbar for X (if Xemacs of course!)
;; (tool-bar-mode . nil)

;; No scrollbar
;; (set-scroll-bar-mode nil)

; Hide menu bar
(menu-bar-mode -1)

;; Put column number into modeline
(column-number-mode 1)

;; Display clock on global modeline
(display-time)

;; Toggle some default configuration
(custom-set-variables
 '(case-fold-search t)
 '(current-language-environment "English")
 '(global-font-lock-mode t nil (font-lock))
 '(show-paren-mode t nil (paren))
 '(transient-mark-mode t)
 '(uniquify-buffer-name-style nil nil (uniquify))
)

;; Customize scheme
;(set-background-color "black") ; Uncomment to avoid transparent background and get a *nice* solid colour
(set-foreground-color "white")
(set-cursor-color "white")
(set-face-foreground 'region "black")
(set-face-background 'region "white")
;;(set-face-foreground 'modeline "white")
;;(set-face-background 'modeline "red")
(set-face-foreground 'isearch "white")
(set-face-background 'isearch "red")
(set-face-background 'isearch-lazy-highlight-face "white")
(set-face-background 'isearch-lazy-highlight-face "red")

(custom-set-faces
 '(region ((t (:background "red"))))
 '(font-lock-comment-face ((t (:foreground "red" :weight bold))))
 '(font-lock-string-face ((t (:foreground "blue" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "cyan" :weight bold))))
 '(font-lock-variable-name-face ((t (:foreground "cyan"))))
 '(font-lock-type-face ((t (:foreground "red" :weight bold))))
 '(font-lock-function-name-face ((((class color)) (:foreground "blue" :weight bold))))
 '(show-paren-match-face ((((class color)) (:foreground "white"  :background "red")))) 
 '(font-lock-constant-face ((t (:foreground "blue" :inverse-video t))))
 '(font-lock-reference-face  ((t (:foreground  "yellow"))))
 '(font-lock-preprocessor-face ((t (:foreground "yellow"))))
 '(font-lock-function-name-face ((((class color) (background light)) (:foreground "yellow"))))
 '(font-lock-builtin-face ((((class color) (background light)) (:foreground "yellow"))))
)

;; Code macros
(global-unset-key "\C-z") ; Turn off this key (Go emacs to background by default)
(global-unset-key "\C-t") ; Remap this key (go-top by default)

;; Replac ordinary search keys by regexp search (if you don't known regexp no problem)
(global-set-key [(control s)] 'isearch-forward-regexp)
(global-set-key [(control meta s)] 'isearch-forward)
(global-set-key [(control r)] 'isearch-backward-regexp)
(global-set-key [(control meta r)] 'isearch-backward)

;; Insert date at this point
(global-set-key "\C-t\C-d" 'insert-date-at-this-point)
(defun insert-date-at-this-point () (interactive)
  (insert (format-time-string "%a %b %e, %Y %l:%M %p")))

;; Define copyright/left C style comment
(defun insert-copyleft-cstyle () (interactive)
  (insert " * " projectname " - \n")
  (insert " * $Id: " (file-name-nondirectory (buffer-file-name)) ",v 1.0" (format-time-string " %Y/%m/%d %H:%M:%S ") "nando Exp $\n")
  (insert " *\n")
  (insert " * Copyright (C)" (format-time-string " %Y ") "by iFork S.R.L <info@ifork.com.ar>\n")
  (insert " * http://www.ifork.com.ar\n"))

;; Define copyright/left Bash style comment
(defun insert-copyleft-bashstyle () (interactive)
  (insert "# " projectname " - \n")
  (insert "# $Id: " (file-name-nondirectory (buffer-file-name)) ",v 1.0" (format-time-string " %Y/%m/%d %H:%M:%S ") "nando Exp $\n")
  (insert "#\n")
  (insert "# Copyright (C)" (format-time-string " %Y ") "by iFork S.R.L <info@ifork.com.ar>\n")
  (insert "# http://www.ifork.com.ar\n"))

;; Define GPL license for C style comment
(defun insert-license-gpl-multifile-cstyle () (interactive)
  (insert " * This file is part of " projectname ".\n")
  (insert " *\n")
  (insert " * Warning: This computer program (" projectname ") is protected by copyright law\n")
  (insert " * and international treaties. Unauthorized reproduction or distribution\n")
  (insert " * of this program, or any portion of it, may result in severe civil and\n")
  (insert " * criminal penalties, and will be prosecuted under the maximum extent\n")
  (insert " * possible under law.\n")
  (insert " *\n")
  (insert " * iFork is a trademark of iFork S.R.L., registered in the U.S. and other countries.\n")
  (insert " *\n")
  (insert " * ---------------------------------------------------------------------------------\n")
  (insert " *\n")
  (insert " * Coded by Hernando Furlan\n")
  (insert " *\n")
  (insert " *          mailto: <base64('ZGV2bmFuZG9AZ21haWwuY29t')>\n")
  (insert " *                  Public GnuPG/PGP key available at: http://www.ifork.com.ar/keyring/hfurlan.asc\n")
  (insert " *                  Key fingerprint: 5FA3 B1B9 AAF8 F3F2 54A9  471A F6AA 2DEB AD63 2E21\n")
  (insert " *\n")
  (insert " *          mailto: <base64('aGZ1cmxhbkBpZm9yay5jb20uYXI=')>\n")
  (insert " *                  Public GnuPG/PGP key available at: https://github.com/devnando\n")
  (insert " *                  Key fingerprint: 80C0 6865 749E 26BD 31C6  2993 0D3A FC81 6DF9 092E\n")
  (insert " *\n")
  (insert " *         website: https://github.com/devnando\n"))

;;  (insert " * " projectname " is free software; you can redistribute it and/or modify\n")
;;  (insert " * it under the terms of the GNU General Public License as published by\n")
;;  (insert " * the Free Software Foundation; either version 2 of the License, or\n")
;;  (insert " * (at your option) any later version.\n")
;;  (insert " *\n")
;;  (insert " * " projectname " is distributed in the hope that it will be useful,\n")
;;  (insert " * but WITHOUT ANY WARRANTY; without even the implied warranty of\n")
;;  (insert " * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n")
;;  (insert " * GNU General Public License for more details.\n")
;;  (insert " *\n")
;;  (insert " * You should have received a copy of the GNU General Public License\n")
;;  (insert " * along with " projectname "; if not, write to the Free Software\n")
;;  (insert " * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"))

;; Define GPL license for Bash style comment
(defun insert-license-gpl-multifile-bashstyle () (interactive)
  (insert "# This file is part of " projectname ".\n")
  (insert "#\n")
  (insert "# Warning: This computer program (" projectname " is protected by copyright law\n")
  (insert "# and international treaties. Unauthorized reproduction or distribution\n")
  (insert "# of this program, or any portion of it, may result in severe civil and\n")
  (insert "# criminal penalties, and will be prosecuted under the maximum extent\n")
  (insert "# possible under law.\n")
  (insert "#\n")
  (insert "# iFork is a trademark of iFork S.R.L., registered in the U.S. and other countries.\n")
  (insert "#\n")
  (insert "# ---------------------------------------------------------------------------------\n")
  (insert "#\n")
  (insert "# Coded by Hernando Furlan\n")
  (insert "#\n")
  (insert "#          mailto: <base64('ZGV2bmFuZG9AZ21haWwuY29t')>\n")
  (insert "#                  Public GnuPG/PGP key available at: http://www.ifork.com.ar/keyring/hfurlan.asc\n")
  (insert "#                  Key fingerprint: 5FA3 B1B9 AAF8 F3F2 54A9  471A F6AA 2DEB AD63 2E21\n")
  (insert "#\n")
  (insert "#          mailto: <base64('aGZ1cmxhbkBpZm9yay5jb20uYXI=')>\n")
  (insert "#                  Public GnuPG/PGP key available at: https://github.com/devnando\n")
  (insert "#                  Key fingerprint: 80C0 6865 749E 26BD 31C6  2993 0D3A FC81 6DF9 092E\n")
  (insert "#\n")
  (insert "#         website: https://github.com/devnando\n"))

;;  (insert "# " projectname " is free software; you can redistribute it and/or modify\n")
;;  (insert "# it under the terms of the GNU General Public License as published by\n")
;;  (insert "# the Free Software Foundation; either version 2 of the License, or\n")
;;  (insert "# (at your option) any later version.\n")
;;  (insert "#\n")
;;  (insert "# " projectname " is distributed in the hope that it will be useful,\n")
;;  (insert "# but WITHOUT ANY WARRANTY; without even the implied warranty of\n")
;;  (insert "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n")
;;  (insert "# GNU General Public License for more details.\n")
;;  (insert "#\n")
;;  (insert "# You should have received a copy of the GNU General Public License\n")
;;  (insert "# along with " projectname "; if not, write to the Free Software\n")
;;  (insert "# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"))

;; C/C++ file header
(global-set-key "\C-t\C-c\C-h" 'insert-c-file-header)
(defun insert-c-file-header () (interactive)
  (defvar projectname (read-string "Project name? "))
  (insert "/*\n")
  (insert-copyleft-cstyle)
  (insert " *\n")
  (insert-license-gpl-multifile-cstyle)
  (insert " */\n")
  (insert "\n")
  (insert "#include <stdio.h>\n")
  (insert "#include <stdlib.h>\n")
  (insert "#include <string.h>\n")
  (insert "\n")
  (insert "int main(int argc, char *argv[]) {\n")
  (insert "\n")
  (insert "}\n"))
  
;; C/C++ function header
(global-set-key "\C-t\C-c\C-f" 'insert-c-function-header)
(defun insert-c-function-header () (interactive)
  (insert "/*\n")
  (insert " * short desc\n")
  (insert " *\n")
  (insert " * long desc\n")
  (insert " */\n")
  (insert "int function(void) {\n")
  (insert "\n")
  (insert "\n")
  (insert "    return(1);\n")
  (insert "}\n")
  (insert "\n"))

;; PHP file header
(global-set-key "\C-t\C-p\C-h" 'insert-php-file-header)
(defun insert-php-file-header () (interactive)
  (defvar projectname (read-string "Project name? "))
  (insert "<?php\n")
  (insert "/*\n")
  (insert-copyleft-cstyle)
  (insert " *\n")
  (insert-license-gpl-multifile-cstyle)
  (insert " */\n")
  (insert "\n")
  (insert "/**\n")
  (insert " * short desc\n")
  (insert " *\n")
  (insert " * long desc\n")
  (insert " * @package " projectname "\n")
  (insert " * @copyright (C)" (format-time-string " %Y ") "by iFork S.R.L\n")
;;  (insert " * @license Released under GNU/GPL License: http://www.gnu.org/copyleft/gpl.html\n")
  (insert " * @version $Revision: 1.0 $\n")
  (insert " * @author Hernando Furlan\n")
  (insert " * @todo none\n")
  (insert " **/\n")
  (insert "\n")
  (insert "\n")
  (insert "?>\n"))

;; PHP function header
(global-set-key "\C-t\C-p\C-f" 'insert-php-function-header)
(defun insert-php-function-header () (interactive)
  (insert "/**\n")
  (insert " * short desc\n")
  (insert " *\n")
  (insert " * long desc\n")
  (insert " * @param void\n")
  (insert " * @return null\n")
  (insert " * @author Hernando Furlan\n")
  (insert " * @todo none\n")
  (insert " **/\n")
  (insert "function () {\n")
  (insert "\n")
  (insert "\n")
  (insert "    return(1);\n")
  (insert "}\n")
  (insert "\n"))
  
;; Perl file header
(global-set-key "\C-t\C-e\C-h" 'insert-perl-file-header)
(defun insert-perl-file-header () (interactive)
  (defvar projectname (read-string "Project name? "))
  (insert "#!/usr/bin/perl -w\n")
  (insert "#!/usr/local/bin/perl -w\n")
  (insert "\n")
  (insert "# -------------------------------------------------------------------------\n")
  (insert-copyleft-bashstyle)
  (insert "#\n")
  (insert-license-gpl-multifile-bashstyle)
  (insert "# -------------------------------------------------------------------------\n")
  (insert "\n")
  (insert "require 5.004;\n")
  (insert "use POSIX;\n")
  (insert "use strict;\n")
  (insert "\n"))

;; Perl function header
(global-set-key "\C-t\C-e\C-f" 'insert-c-function-header)
(defun insert-c-function-header () (interactive)
  (insert "# -------------------------------------------------------------------------\n")
  (insert "# short desc\n")
  (insert "#\n")
  (insert "# long desc\n")
  (insert "# -------------------------------------------------------------------------\n")
  (insert "sub function {\n")
  (insert "    my (@argv) = @_;\n")
  (insert "\n")
  (insert "\n")
  (insert "    return(1);\n")
  (insert "}\n")
  (insert "\n"))

;; SQL Text comment
(global-set-key "\C-t\C-s\C-h" 'insert-sql-file-header)
(defun insert-sql-file-header () (interactive)
  (defvar projectname (read-string "Project name? "))
  (insert "-- " projectname " - \n")
  (insert "-- $Id: " (file-name-nondirectory (buffer-file-name)) ",v 1.0" (format-time-string " %Y/%m/%d %H:%M:%S ") "nando Exp $\n")
  (insert "--\n")
  (insert "-- Hernando Furlan <base64('aGZ1cmxhbkBpZm9yay5jb20uYXI=')>\n")
  (insert "-- https://github.com/devnando\n")
  (insert "\n"))

;; Plain Text header
(global-set-key "\C-t\C-t\C-h" 'insert-plaintext-file-header)
(defun insert-plaintext-file-header () (interactive)
  (insert "# -------------------------------------------------------------------------\n")
  (insert "# " (file-name-nondirectory (buffer-file-name)) " - \n")
  (insert "# Hernando Furlan <base64('aGZ1cmxhbkBpZm9yay5jb20uYXI=')>\n")
  (insert "# https://github.com/devnando\n")
  (insert "# -------------------------------------------------------------------------\n")
  (insert "\n"))

(message "Loading of Nando's dot emacs OK!")
